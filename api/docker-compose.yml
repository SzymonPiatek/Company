services:
  postgres:
    image: postgres:15
    restart: always
    env_file:
      - ../envs/.env-db
    volumes:
      - pgdata:/var/lib/postgresql/data

  prisma-manager:
    build:
      context: .
      dockerfile: apps/prisma-manager/Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./prisma:/usr/src/app/prisma
      - ./node_modules:/usr/src/app/node_modules
    env_file:
      - ../envs/.env-db
    ports:
      - "5555:5555"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prisma.rule=PathPrefix(`/studio`)"
      - "traefik.http.routers.prisma.entrypoints=web"
      - "traefik.http.services.prisma.loadbalancer.server.port=5555"
    depends_on:
      - postgres
    command: >
      sh -c "
        echo 'ðŸ”„ Running Prisma Migrate...';
        npx prisma migrate dev --schema=prisma/schema.prisma;
    
        echo 'âœ… Generating Prisma Client...';
        npx prisma generate --schema=prisma/schema.prisma;
    
        echo 'ðŸš€ Starting Prisma Studio...';
        npx prisma studio --schema=prisma/schema.prisma --port 5555
      "

  user-service:
    build:
      context: .
      dockerfile: apps/user-service/Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./prisma:/usr/src/app/prisma
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./tsconfig.base.json:/usr/src/app/tsconfig.base.json
      - ./apps/user-service:/usr/src/app/apps/user-service
      - ./apps/user-service/tsconfig.json:/usr/src/app/apps/user-service/tsconfig.json
      - ./libs:/usr/src/app/libs
    env_file:
      - ../envs/.env-db
      - ../envs/.env-api
    ports:
      - "3001:3000"
    command: >
      sh -c "
        echo 'âœ… Generating Prisma Client...';
        npm run generate;
      
        echo 'ðŸš€ Starting User Service...';
        npm run dev:user;
      "
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=PathPrefix(`/api/user`)"
      - "traefik.http.routers.user.entrypoints=web"
      - "traefik.http.services.user.loadbalancer.server.port=3000"

  resource-service:
    build:
      context: .
      dockerfile: apps/resource-service/Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./prisma:/usr/src/app/prisma
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./tsconfig.base.json:/usr/src/app/tsconfig.base.json
      - ./apps/resource-service:/usr/src/app/apps/resource-service
      - ./apps/resource-service/tsconfig.json:/usr/src/app/apps/resource-service/tsconfig.json
      - ./libs:/usr/src/app/libs
    env_file:
      - ../envs/.env-db
      - ../envs/.env-api
    ports:
      - "3002:3000"
    command: >
      sh -c "
        echo 'âœ… Generating Prisma Client...';
        npm run generate;
      
        echo 'ðŸš€ Starting Resource Service...';
        npm run dev:resource;
      "
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.resource.rule=PathPrefix(`/api/resource`)"
      - "traefik.http.routers.resource.entrypoints=web"
      - "traefik.http.services.resource.loadbalancer.server.port=3000"

  test-manager:
    build:
      context: .
      dockerfile: apps/test-manager/Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./apps:/usr/src/app/apps
      - ./libs:/usr/src/app/libs
      - ./prisma:/usr/src/app/prisma
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./tsconfig.base.json:/usr/src/app/tsconfig.base.json
      - ./package.json:/usr/src/app/package.json
      - ./package-lock.json:/usr/src/app/package-lock.json
      - ./jest.config.ts:/usr/src/app/jest.config.ts
    env_file:
      - ../envs/.env-api
      - ../envs/.env-db
    depends_on:
      - postgres
      - user-service
      - resource-service
      - prisma-manager
    command: >
      sh -c "
        npm install &&
        sh
      "
    tty: true
    stdin_open: true

  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

volumes:
  pgdata: